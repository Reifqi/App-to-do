{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","_useState","useState","edit","value","_useState2","Object","slicedToArray","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","react_default","a","createElement","className","Fragment","placeholder","onChange","name","ref","onClick","TodoItem","_ref","todos","completeTodo","removeTodo","updateTodo","setEdit","components_TodoForm","map","todo","index","completed","key","index_esm","ti_index_esm","ai_index_esm","App","setTodos","_console","test","newTodos","concat","toConsumableArray","console","log","apply","components_TodoItem","todoId","newValue","prev","item","updatedTodos","filter","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4ecd105e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>\n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder='Add a todo'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button'>\n            Add todo\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport {AiOutlineCheckCircle} from 'react-icons/ai'\n\nconst TodoItem = ({ todos, completeTodo, removeTodo, updateTodo }) => {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n\n  const submitUpdate = value => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n    className={todo.completed ? \"todo-row complete\": \"todo-row\"}\n      key={index}\n    >\n      {todo.text}\n      <div className='icons'>\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className='delete-icon'\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className='edit-icon'\n        />\n\n        <AiOutlineCheckCircle\n          onClick={() => completeTodo(todo.id)}\n          className='edit-icon'\n          \n        />\n      </div>\n    </div>\n  ));\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport { useState } from \"react\";\nimport TodoItem from \"./components/TodoItem\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = (todo) => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n    console.log(...todos);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  \n\n  const removeTodo =(id) =>{\n    let updatedTodos=[...todos].filter((todo)=> todo.id !== id)\n    setTodos(updatedTodos);\n  };\n\n  const completeTodo =(id) =>{\n    let updatedTodos = todos.map((todo)=>{\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      \n      }\n      return todo\n    })\n    setTodos(updatedTodos)\n  };\n  return (\n    <div className=\"todo-app\">\n      <h1>To-do List</h1>\n      <TodoForm onSubmit={addTodo} />\n      <hr className=\"seperator\"/>\n      <TodoItem updateTodo={updateTodo} removeTodo={removeTodo} completeTodo ={completeTodo} todos = {todos} />\n        \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}